#!/bin/bash

root_dev_path=$(findmnt -nv -o SOURCE /)
efi_dev_path=$(findmnt -n -o SOURCE /boot/efi)

root_fstype=$(blkid -s TYPE -o value $root_dev_path)
efi_fstype=$(blkid -s TYPE -o value $efi_dev_path)


# 1. extract firmware
# this should be identical to the %post script in asahi-fwextract

source /usr/share/asahi-scripts/functions.sh
esp="/run/.system-efi"
mount_sys_esp "$esp"

if [ ! -e "$esp/asahi/all_firmware.tar.gz" ]; then
  printf '==> No /asahi/all_firmware.tar.gz in the ESP, skipping firmware extraction'
  return 0
fi

printf '==> Upgrading vendor firmware package...\n'
python3 -m asahi_firmware.update "$esp/asahi" "$esp/vendorfw/firmware.tar.new" "$esp/vendorfw/manifest.txt.new"
mv -f "$esp/vendorfw/manifest.txt"{.new,}
mv -f "$esp/vendorfw/firmware.tar"{.new,}
printf '    Firmware upgraded\n'
update-vendor-firmware

# 2. randomize the UUID of the efi and root partitions
if [ $(echo $root_dev_path | grep '^/dev/nvme') ]; then
    if [ $efi_fstype == 'vfat' ]; then
	    echo -e "\nSetting $efi_dev label to EFI-FEDORA"
	    dosfslabel $efi_dev_path 'EFI-FEDORA'

        echo -e '\nRandomizing EFI system partition UUID...'
        # Ugly... why isn't there a command to do this?
        efi_uuid_old=$(blkid -s UUID -o value $efi_dev_path)
        ssize=$(blockdev --getss $efi_dev_path)
        dd bs=1 seek=67 count=4 conv=notrunc if=/dev/urandom of=$efi_dev_path
        dd bs=1 skip=67 seek=$((67+6*$ssize)) count=4 conv=notrunc if=$efi_dev_path of=$efi_dev_path
        efi_uuid_new=$(blkid -s UUID -o value $efi_dev_path)
        echo -e "EFI partition: $efi_uuid_new\n"

        if [ -n "$efi_uuid_new" ]; then
            echo "Regenerating /etc/fstab..."
            sed -i "s/$efi_uuid_old/$efi_uuid_new/" /etc/fstab
        fi
    fi
    # only support randomizing the UUID of ext4 root partitions
    # btrfs is not supported as you can't change the UUID of a btrfs partiton while it's mounted
    if [ $root_fstype == 'ext4' ]; then
        echo "Randomizing root filesystem UUID..."
        root_uuid_old=$(blkid -s UUID -o value $root_dev_path)
        tune2fs -U random $root_dev_path
        root_uuid_new=$(blkid -s UUID -o value $root_dev_path)
        echo "Root filesystem: $root_uuid_new"

        if [ -n "$root_uuid_new" ]; then
            echo "Regenerating /etc/fstab..."
            sed -i "s/$root_uuid_old/$root_uuid_new/" /etc/fstab
        fi
    fi

# 3. expand the root partition and filesystem
# this is quite a simple method...there's room for improvement

    part_id=$(echo $root_dev_path | egrep -o 'p[0-9]+$')
    part_num=$(echo $part_id | tr -d 'p')
    root_disk=$(echo $root_dev_path | sed "s/$part_id$//")

    echo -e "\ngrowpart $root_disk $part_num"
    # don't fail if partition doesn't need to be expanded
    growpart $root_disk $part_num || true

    if [ $root_fstype == 'btrfs' ]; then
        echo -e "\nbtrfs filesystem resize max /"
        btrfs filesystem resize max /
    fi

    if [ $root_fstype == 'ext4' ]; then
        echo -e "\nresize2fs $root_dev_path"
        resize2fs $root_dev_path
    fi
fi

# 4. generate a new machine-id
if [ ! -e /etc/machine-id ]; then
    systemd-machine-id-setup
    echo "KERNEL_INSTALL_MACHINE_ID=$(cat /etc/machine-id)" > /etc/machine-info

    # create new BLS entries
    # this is needed as the /etc/machine-id value has been changed

    rm -f /boot/loader/entries/*.conf

    installed_kernels=$(rpm -q kernel | sed 's/kernel-//')

    # kernel-install will call dracut, so no need to run that separately
    for kernel_version in $installed_kernels
    do
        kernel-install add $kernel_version /lib/modules/$kernel_version/vmlinuz
    done
fi

# 5. update-grub
update-grub
